dfTrain.JobSatAttrRateL4 = count(dfTrain.JobSatisfactionL4)/1170
max(dfTrain.JobSatAttrRateL1, dfTrain.JobSatAttrRateL2, dfTrain.JobSatAttrRateL3, dfTrain.JobSatAttrRateL4)
JobSatAttrRates <- c(dfTrain.JobSatAttrRateL1, dfTrain.JobSatAttrRateL2, dfTrain.JobSatAttrRateL3, dfTrain.JobSatAttrRateL4)
JobSatAttrRates <- c(dfTrain.JobSatAttrRateL1, dfTrain.JobSatAttrRateL2, dfTrain.JobSatAttrRateL3, dfTrain.JobSatAttrRateL4) + c("JobSatAttrRateL1", "JobSatAttrRateL2", "JobSatAttrRateL3", "JobSatAttrRateL4")
JobSatAttrRates <- c(c(dfTrain.JobSatAttrRateL1, dfTrain.JobSatAttrRateL2, dfTrain.JobSatAttrRateL3, dfTrain.JobSatAttrRateL4), c("JobSatAttrRateL1", "JobSatAttrRateL2", "JobSatAttrRateL3", "JobSatAttrRateL4"))
JobSatAttrRates <- data.frame(c(dfTrain.JobSatAttrRateL1, dfTrain.JobSatAttrRateL2, dfTrain.JobSatAttrRateL3, dfTrain.JobSatAttrRateL4), c("JobSatAttrRateL1", "JobSatAttrRateL2", "JobSatAttrRateL3", "JobSatAttrRateL4"))
JobSatAttrRates <- data.frame(c(dfTrain.JobSatAttrRateL1, dfTrain.JobSatAttrRateL2, dfTrain.JobSatAttrRateL3, dfTrain.JobSatAttrRateL4), row.names = c("JobSatAttrRateL1", "JobSatAttrRateL2", "JobSatAttrRateL3", "JobSatAttrRateL4"))
JobSatAttrRates <- data.frame(c(dfTrain.JobSatAttrRateL1, dfTrain.JobSatAttrRateL2, dfTrain.JobSatAttrRateL3, dfTrain.JobSatAttrRateL4), row.names = c("L1", "L2", "L3", "L4"))
JobSatAttrRates <- data.frame(c(dfTrain.JobSatAttrRateL1, dfTrain.JobSatAttrRateL2, dfTrain.JobSatAttrRateL3, dfTrain.JobSatAttrRateL4), row.names = c("1", "2", "3", "4"))
JobSatAttrRates <- data.frame(c(dfTrain.JobSatAttrRateL1, dfTrain.JobSatAttrRateL2, dfTrain.JobSatAttrRateL3, dfTrain.JobSatAttrRateL4))
JobSatAttrRates
JobSatAttrRates <- data.frame(c(dfTrain.JobSatAttrRateL1, dfTrain.JobSatAttrRateL2, dfTrain.JobSatAttrRateL3, dfTrain.JobSatAttrRateL4), use.names = TRUE)
JobSatAttrRates
VariableSatRates <- data.frame(c(dfTrain.JobSatAttrRateL1, dfTrain.JobSatAttrRateL2, dfTrain.JobSatAttrRateL3, dfTrain.JobSatAttrRateL4))
colnames(VariableSatRates) <- c("Level 1 Attr Rate", "Level 2 Attr Rate", "Level 3 Attr Rate", "Level 4 Attr Rate")
VariableSatRates
print(dfTrainAttritionRate)
dfTrainAttrition = filter(dfTrain, Attrition == "Yes")
dfTrainAttrRate = (count(dfTrainAttrition))/1170
colnames(dfTrainAttrRate) <- c("dfTrainAttritionRate")
dfTrainAttrRate <- as.numeric(dfTrainAttrRate)
print(dfTrainAttritionRate)
dfTrainAttrRate
dfTrain.var <- c(colnames(dfTrain[,4]))
dfTrain.var <- c(colnames(dfTrain[4,]))
dfTrain.var <- c(colnames(dfTrain$4)
variable.names(dfTrain)
variable.names(dfTrain[4])
dfTrain.var <- variable.names(dfTrain[4])
dfTrain.var <- variable.names(dfTrain[18])
dfTrain.var = filter(dfTrain, dfTrain.var >= 0 )
dfTrain.var <- variable.names(dfTrain[18])
dfTrain.JobSatisfactionL1 = filter(dfTrain, Attrition == "Yes" & dfTrain.var == 1)
dfTrain.JobSatisfactionL2 = filter(dfTrain, Attrition == "Yes" & dfTrain.var == 2)
#Factor Level 1
dfTrain.JobSatisfactionL1 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 1)
#Job Satisfaction Level 1 Attrition Rate
dfTrain.JobSatAttrRateL1 = count(dfTrain.JobSatisfactionL1)/1170
#Factor Level 2
dfTrain.JobSatisfactionL2 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 2)
dfTrain.JobSatAttrRateL2 = count(dfTrain.JobSatisfactionL2)/1170
#Factor Level 3
dfTrain.JobSatisfactionL3 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 3)
dfTrain.JobSatAttrRateL3 = count(dfTrain.JobSatisfactionL3)/1170
#Factor Level 4
dfTrain.JobSatisfactionL4 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 4)
dfTrain.JobSatAttrRateL4 = count(dfTrain.JobSatisfactionL4)/1170
sum(count(dfTrain.JobSatisfactionAttr1), count(dfTrain.JobSatisfactionAttr2), count(dfTrain.JobSatisfactionAttr3), count(dfTrain.JobSatisfactionAttr4))
max(dfTrain.JobSatAttrRateL1, dfTrain.JobSatAttrRateL2, dfTrain.JobSatAttrRateL3, dfTrain.JobSatAttrRateL4)
VariableAttrRateL1 <- dfTrain.JobSatAttrRateL1
VariableAttrRateL2 <- dfTrain.JobSatAttrRateL2
VariableAttrRateL3 <- dfTrain.JobSatAttrRateL3
VariableAttrRateL4 <- dfTrain.JobSatAttrRateL4
VariableSatRates <- data.frame(c(VariableAttrRateL1, VariableAttrRateL2, VariableAttrRateL3, VariableAttrRateL4))
colnames(VariableSatRates) <- c("Level 1 Attr Rate", "Level 2 Attr Rate", "Level 3 Attr Rate", "Level 4 Attr Rate")
VariableSatRates
getwd()
setwd("/Users/mmastran/SMU/MSDS/github/MSDS/CaseStudy2")
dfTrain <- read.csv()
head(dfTrain[, 'BusinessTravel'])
dfTrainVar <- c("BusinessTravel")
head(dfTrain[, dfTrainVar])
dfTrain.var.dummies <- model.matrix(~dfTrainVar -1, data = dfTrain)
head(dfTrain.var.dummies)
factor(dfTrain$BusinessTravel)
dfTrainVarDummies <- model.matrix(~dfTrainVar -1, data = dfTrain)
dftrain$BusinessTravel <- factor(dfTrain$BusinessTravel)
dfTrain$BusinessTravel <- factor(dfTrain$BusinessTravel)
dfTrainVarDummies <- model.matrix(~dfTrainVar -1, data = dfTrain)
dfTrainVarDummies <- model.matrix(~dfTrainVar, data = dfTrain)
head(dfTrain[, dfTrainVar])
dfTrainVarDummies <- model.matrix(~dfTrainVar, data = dfTrain)
dfTrainVarDummies <- model. (~dfTrainVar, data = dfTrain, contrasts.arg = c(contrasts(dfTrainVar)), data = dfTrain)
dfTrainVarDummies <- model.matrix(~dfTrainVar, data = dfTrain, contrasts.arg = c(contrasts(dfTrainVar)), data = dfTrain)
dfTrainVarDummies <- model.matrix(~dfTrainVar, data = dfTrain, contrasts.arg = contrasts(dfTrainVar), data = dfTrain)
dfTrainVarDummies <- model.matrix(~dfTrainVar, data = environment(dfTrain), contrasts.arg = contrasts(dfTrainVar), data = dfTrain)
typeof(BusinessTravel)
dfTrainVar <- as.character("BusinessTravel")
head(dfTrain[, dfTrainVar])
dfTrainVarDummies <- model.matrix(~dfTrainVar, data = environment(dfTrain), contrasts.arg = contrasts(BusinessTravel), data = dfTrain)
dfTrainVarDummies <- model.matrix(~dfTrainVar, data = dfTrain)
dfTrainVarDummies <- model.matrix(~dfTrainVar -1, data = dfTrain)
dfTrainVarDummies <- model.matrix(~dfTrainVar +1, data = dfTrain)
levels(dfTrainVar)
levels(BusinessTravel)
levels(dfTrain$BusinessTravel)
dfTrainVarDummies <- model.matrix(~dfTrain$BusinessTravel -1, data = dfTrain)
View(dfTrainVarDummies)
head(dfTrain.var.dummies)
head(dfTrainVarDummies)
dfTrainVar <- dfTrain$BusinessTravel
head(dfTrain[, dfTrainVar])
dfTrainVarDummies <- model.matrix(~dfTrain$BusinessTravel -1, data = dfTrain)
head(dfTrainVarDummies)
dfTrainBusinessTravelDummies <- model.matrix(~dfTrain$BusinessTravel -1, data = dfTrain)
head(dfTrainBusinessTravelDummies)
head(dfTrain[, 'Attrition'])
dfTrainAttritionDummies <- model.matrix(~dfTrain$Attrition -1, data = dfTrain)
head(dfTrainAttritionDummies)
dfTrainJobSatisfactionDummies <- model.matrix(~dfTrain$JobSatisfaction -1, data = dfTrain)
head(dfTrainJobSatisfactionDummies)
lm(formula = Attrition ~ BusinessTravel + JobSatisfaction, data = dfTrain)
lm(formula = dfTrainAttritionDummies ~ dfTrainBusinessTravelDummies + dfTrainJobSatisfactionDummies)
MonthToYear <- function(x){
x = x * 12
}
EmpData$AnnualIncome <- as.integer(lapply(EmpData$MonthlyIncome, MonthToYear))
Fit1 = glm(dfTrain$Attrition ~ ., data=dfTrain, family = binomial())
Fit1 = glm(formula = dfTrainAttritionDummies ~ dfTrainBusinessTravelDummies + dfTrainJobSatisfactionDummies)
knitr::opts_chunk$set(echo = TRUE)
library(base)
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(knitr)
library(mlr)
library(caret)
#colnames(read.csv("CaseStudy2-data.csv", header = TRUE))
#Read in CSV and change columns of interest to factors
dfTrainRaw <- read_csv("CaseStudy2-data.csv")
dfValRaw <- read_csv("CaseStudy2Validation.csv")
dfTrain <- read_csv("CaseStudy2-data.csv")
#Read in CSV and change columns of interest to factors
dfVal <- read_csv("CaseStudy2Validation.csv")
dfTrain <- read_csv("CaseStudy2-data.csv")
dfVal <- read_csv("CaseStudy2Validation.csv", cols(
Attrition = col_factor(levels = c("Yes", "No")),
BusinessTravel = col_factor(levels = c("Non-Travel", "Travel_Rarely", "Travel_Frequently")),
Department = col_factor(levels = c("Human Resources", "Research & Development", "Sales")),
Education = col_factor(levels = c("1", "2", "3", "4", "5")),
EducationField = col_factor(levels = c("Human Resources", "Life Sciences", "Marketing", "Medical", "Technical Degree", "Other")),
EnvironmentSatisfaction = col_factor(levels = c("1", "2", "3", "4")),
Gender = col_factor(levels = c("Male", "Female")),
JobInvolvement = col_factor(levels = c("1", "2", "3", "4")),
JobLevel = col_factor(levels = c("1", "2", "3", "4", "5")),
JobSatisfaction = col_factor(levels = c("1", "2", "3", "4")),
MaritalStatus = col_factor(levels = c("Single", "Married", "Divorced")),
NumCompaniesWorked = col_factor(levels = c("0", "1", "2", "3", "4", "5", "6", "7", "8", "9")),
OverTime = col_factor(levels = c("Yes", "No")),
PerformanceRating = col_factor(levels = c("1", "2", "3", "4")),
RelationshipSatisfaction = col_factor(levels = c("1", "2", "3", "4")),
StandardHours = col_number(),
StockOptionLevel = col_factor(levels = c("0", "1", "2", "3")),
WorkLifeBalance = col_factor(levels = c("1", "2", "3", "4"))
))
dfTrain <- dfTrain %>%
mutate_if(is.character, as.factor) %>%
select(Attrition, everything())
dfTrain$AnnIncomeFactor <- cut(dfTrain$AnnualIncome, breaks=c(0,50000,100000,199999,Inf),labels=c("$0-$50,000", "$50,000-$100,000", "$100,000-$200,000", "Over $200,000"))
dfTrain$AnnualIncome <- as.integer(lapply(dfTrain$MonthlyIncome, MonthToYear))
MonthToYear <- function(x){
x = x * 12
}
dfTrain$AnnualIncome <- as.integer(lapply(dfTrain$MonthlyIncome, MonthToYear))
dfTrain$AnnualIncome <- factor(dfTrain$AnnualIncome)
dfTrain$AnnualIncome <- as.integer(lapply(dfTrain$MonthlyIncome, MonthToYear))
dfTrain$AnnualIncome <- cut(dfTrain$AnnualIncome, breaks=c(0,50000,100000,199999,Inf),labels=c("$0-$50,000", "$50,000-$100,000", "$100,000-$200,000", "Over $200,000"))
dfTrain$AgeGroup <- cut(dfTrain$Age, breaks = c(18,30,40,50,Inf), labels = c("18-30", "30-40", "40-50", "Over 50"))
dfTrain$AgeGroup <- cut(dfTrain$Age, breaks = c(18,20,22,25,30,35,40,45,50,55,60,Inf), labels = c("18-20", "20-22", "22-25", "25-30", "30-35", "35-40", "40-45", "45-50", "50-55", "55-60", "60+"))
dfTrain$Attrition <- factor(dfTrain$Attrition)
dfTrain$BusinessTravel <- factor(dfTrain$BusinessTravel)
dfTrain$Education <- factor(dfTrain$Education)
dfTrain$Education <- cut(dfTrain$EnvironmentSatisfaction, breaks = 4, labels = c("HighSchool", "SomeCollege", "College", "Graduate", "Doctoral"))
dfTrain <- read_csv("CaseStudy2-data.csv")
MonthToYear <- function(x){
x = x * 12
}
dfTrain$AnnualIncome <- as.integer(lapply(dfTrain$MonthlyIncome, MonthToYear))
dfTrain$AnnualIncome <- factor(dfTrain$AnnualIncome)
#Factor character variables
dfTrain <- dfTrain %>%
mutate_if(is.character, as.factor) %>%
select(Attrition, everything())
#Factor Annual Income into 6 levels
dfTrain$AnnualIncome <- cut(dfTrain$AnnualIncome, breaks=c(0,50000,100000,199999,Inf),labels=c("$0-$50,000", "$50,000-$100,000", "$100,000-$200,000", "Over $200,000"))
dfTrain$AnnualIncome <- as.integer(lapply(dfTrain$MonthlyIncome, MonthToYear))
#Factor character variables
dfTrain <- dfTrain %>%
mutate_if(is.character, as.factor) %>%
select(Attrition, everything())
#Factor Annual Income into 6 levels
dfTrain$AnnualIncome <- cut(dfTrain$AnnualIncome, breaks=c(0,50000,100000,199999,Inf),labels=c("$0-$50,000", "$50,000-$100,000", "$100,000-$200,000", "Over $200,000"))
#Factor Age of Employee into Age Groups, 8 levels
dfTrain$AgeGroup <- cut(dfTrain$Age, breaks = c(18,20,22,25,30,35,40,45,50,55,60,Inf), labels = c("18-20", "20-22", "22-25", "25-30", "30-35", "35-40", "40-45", "45-50", "50-55", "55-60", "60+"))
dfTrain$Attrition <- factor(dfTrain$Attrition)
dfTrain$BusinessTravel <- factor(dfTrain$BusinessTravel)
dfTrain$Education <- cut(dfTrain$EnvironmentSatisfaction, breaks = 4, labels = c("HighSchool", "SomeCollege", "College", "Graduate", "Doctoral"))
dfTrain$Education <- cut(dfTrain$EnvironmentSatisfaction, breaks = 5, labels = c("HighSchool", "SomeCollege", "College", "Graduate", "Doctoral"))
dfTrain$JobLevel <- cut(dfTrain$Joblevel, breaks = 4, labels = c("Entry", "Middle", "Director", "Executive"))
dfTrain$EnvironmentSatisfaction <- cut(dfTrain$EnvironmentSatisfaction, breaks = 4, labels = c("Low", "Medium", "High", "Very High"))
dfTrain$RelationshipSatisfaction <- cut(dfTrain$RelationshipSatisfaction, breaks = 4, labels = c("Low", "Medium", "High", "Very High"))
dfTrain$PerformanceRating <- cut(dfTrain$PerformanceRating, breaks = 4, labels = c("Does Not Meet Expectations", "Meets Some Expections", "Meets Expectations", "Exceeds Expectations"))
dfTrain$WorkLifeBalance <- cut(dfTrain$WorkLifeBalance, breaks = 4, labels = c("Bad", "Good", "Better", "Best"))
dfTrain$JobRole <- factor(dfTrain$JobRole)
dfTrain$JobLevel <- factor(dfTrain$JobLevel)
dfTrain$MaritalStatus <- factor(dfTrain$MaritalStatus)
dfTrain$JobLevel <- cut(dfTrain$Joblevel, breaks = 4, labels = c("Entry", "Middle", "Director", "VP" "Executive"))
#Read in CSV and change columns of interest to factors
dfVal <- read_csv("CaseStudy2Validation.csv")
dfTrain <- read_csv("CaseStudy2-data.csv")
MonthToYear <- function(x){
x = x * 12
}
dfTrain$AnnualIncome <- as.integer(lapply(dfTrain$MonthlyIncome, MonthToYear))
#Factor character variables
dfTrain <- dfTrain %>%
mutate_if(is.character, as.factor) %>%
select(Attrition, everything())
dfTrain$AnnualIncome <- cut(dfTrain$AnnualIncome, breaks=c(0,50000,100000,199999,Inf),labels=c("$0-$50,000", "$50,000-$100,000", "$100,000-$200,000", "Over $200,000"))
dfTrain$AgeGroup <- cut(dfTrain$Age, breaks = c(18,20,22,25,30,35,40,45,50,55,60,Inf), labels = c("18-20", "20-22", "22-25", "25-30", "30-35", "35-40", "40-45", "45-50", "50-55", "55-60", "60+"))
nTrain.points <- 1170
nVal.points <- 300
num.test.set.labels <- nTrain.points * (nTrain.points - nVal.points)
training <- sample(1:nTrain.points, nVal.points, replace = FALSE)
train <- subset(dfTrain[training, ], select = c(Age, HourlyRate))
testing <- setdiff(1:nTrain.points, training)
test <- subset(dfTrain[testing,], select = c(Age, HourlyRate))
cl <- dfTrain$Attrition[training]
true.labels <- dfTrain$Attrition[testing]
knn3Train(train, test, cl, k=9)
for(k in 1:20) {
print(k)
predicted.labels <- knn3Train(train, test, cl, k)
num.incorrect.labels <- sum(predicted.labels != true.labels)
misclassification.rate <- num.incorrect.labels / num.test.set.labels
print(misclassification.rate)
}
test <- c(50,20)
knn3Train(train,test,cl,k=5)
knitr::opts_chunk$set(echo = TRUE)
library(base)
library(readr)
library(tidyr)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(knitr)
library(mlr)
library(caret)
#colnames(read.csv("CaseStudy2-data.csv", header = TRUE))
#Read in CSV and change columns of interest to factors
dfVal <- read_csv("CaseStudy2Validation.csv")
dfTrain <- read_csv("CaseStudy2-data.csv")
#Taking a look at the data to see what we are working with!
#str(dfTrain)
# We have 37 variables and 1170 observations. The Variable columns seem to have the correct variable object types.
#dfTrain <- subset(dfTrain, select = -c(Rand, EmployeeCount, Over18)) #Dropping Employee ID and Rand arbitrary variables as well as variables with only 1 level: EmployeeCount, Over18
summary(dfTrain)
#Transform data to normalize variables for multivariant analysis.
##Factor for Regression
head(dfTrain[, 'BusinessTravel'])
dfTrainBusinessTravelDummies <- model.matrix(~dfTrain$BusinessTravel -1, data = dfTrain)
head(dfTrainBusinessTravelDummies)
dfTrainJobSatisfactionDummies <- model.matrix(~dfTrain$JobSatisfaction -1, data = dfTrain)
head(dfTrainJobSatisfactionDummies)
head(dfTrain[, 'Attrition'])
dfTrainAttritionDummies <- model.matrix(~dfTrain$Attrition -1, data = dfTrain)
head(dfTrainAttritionDummies)
lm(formula = dfTrainAttritionDummies ~ dfTrainBusinessTravelDummies + dfTrainJobSatisfactionDummies)
#Factor
#Add column of annual income data by multiplying monthly income by 12
#Function to convert monthly income to annual income
MonthToYear <- function(x){
x = x * 12
}
dfTrain$AnnualIncome <- as.integer(lapply(dfTrain$MonthlyIncome, MonthToYear))
#Factor character variables
dfTrain <- dfTrain %>%
mutate_if(is.character, as.factor) %>%
select(Attrition, everything())
#Factor Annual Income into 6 levels
dfTrain$AnnualIncome <- cut(dfTrain$AnnualIncome, breaks=c(0,50000,100000,199999,Inf),labels=c("$0-$50,000", "$50,000-$100,000", "$100,000-$200,000", "Over $200,000"))
#Factor Age of Employee into Age Groups, 8 levels
dfTrain$AgeGroup <- cut(dfTrain$Age, breaks = c(18,20,22,25,30,35,40,45,50,55,60,Inf), labels = c("18-20", "20-22", "22-25", "25-30", "30-35", "35-40", "40-45", "45-50", "50-55", "55-60", "60+"))
#Taking a look at the data to see what we are working with!
#str(dfTrain)
# We have 37 variables and 1170 observations. The Variable columns seem to have the correct variable object types.
#dfTrain <- subset(dfTrain, select = -c(Rand, EmployeeCount, Over18)) #Dropping Employee ID and Rand arbitrary variables as well as variables with only 1 level: EmployeeCount, Over18
summary(dfTrain)
#Factor
#Add column of annual income data by multiplying monthly income by 12
#Function to convert monthly income to annual income
MonthToYear <- function(x){
x = x * 12
}
dfTrain$AnnualIncome <- as.integer(lapply(dfTrain$MonthlyIncome, MonthToYear))
#Factor character variables
dfTrain <- dfTrain %>%
mutate_if(is.character, as.factor) %>%
select(Attrition, everything())
#Factor Annual Income into 6 levels
dfTrain$AnnualIncome <- cut(dfTrain$AnnualIncome, breaks=c(0,50000,100000,199999,Inf),labels=c("$0-$50,000", "$50,000-$100,000", "$100,000-$200,000", "Over $200,000"))
#Factor Age of Employee into Age Groups, 8 levels
dfTrain$AgeGroup <- cut(dfTrain$Age, breaks = c(18,20,22,25,30,35,40,45,50,55,60,Inf), labels = c("18-20", "20-22", "22-25", "25-30", "30-35", "35-40", "40-45", "45-50", "50-55", "55-60", "60+"))
dfTrainAttrition = filter(dfTrain, Attrition == "Yes")
dfTrainAttrRate = (count(dfTrainAttrition))/1170
colnames(dfTrainAttrRate) <- c("dfTrainAttritionRate")
dfTrainAttrRate <- as.numeric(dfTrainAttrRate)
print(dfTrainAttritionRate)
dfTrainAttrition = filter(dfTrain, Attrition == "Yes")
dfTrainAttritionRate = (count(dfTrainAttrition))/1170
colnames(dfTrainAttrRate) <- c("dfTrainAttritionRate")
dfTrainAttrition = filter(dfTrain, Attrition == "Yes")
dfTrainAttritionRate = (count(dfTrainAttrition))/1170
colnames(dfTrainAttritionRate) <- c("dfTrainAttritionRate")
dfTrainAttrRate <- as.numeric(dfTrainAttrRate)
print(dfTrainAttritionRate)
dfTrainAttrRate
#Attrition Rate Per Variable Factor Level
#Attrition Rate by Job Satisfaction
#dfTrain.var <- c(colnames(dfTrain$4)
#variable.names(dfTrain)
#dfTrain.var = filter(dfTrain, dfTrain.var >= 0 )
#Factor Level 1
dfTrain.JobSatisfactionL1 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 1)
#Job Satisfaction Level 1 Attrition Rate
dfTrain.JobSatAttrRateL1 = count(dfTrain.JobSatisfactionL1)/1170
#Factor Level 2
dfTrain.JobSatisfactionL2 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 2)
dfTrain.JobSatAttrRateL2 = count(dfTrain.JobSatisfactionL2)/1170
#Factor Level 3
dfTrain.JobSatisfactionL3 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 3)
dfTrain.JobSatAttrRateL3 = count(dfTrain.JobSatisfactionL3)/1170
#Factor Level 4
dfTrain.JobSatisfactionL4 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 4)
dfTrain.JobSatAttrRateL4 = count(dfTrain.JobSatisfactionL4)/1170
ggplot(dfTrain,aes(x=factor(Attrition),fill=factor(JobSatisfaction)))+
geom_bar(position="dodge")
ggplot(dfTrain,aes(x=factor(JobSatisfaction), y=factor(Attrition),fill=factor(JobSatisfaction)))+
geom_jitter()
ggplot(dfTrain,aes(x=factor(JobSatisfaction), y=factor(Attrition),fill=factor(JobSatisfaction)))+
geom_point()
ggplot(dfTrain,aes(x=factor(JobInvolvement),fill=factor(Attrition)))+
geom_bar(position="dodge")+
facet_grid(". ~ Attrition")
ggplot(dfTrain,aes(x=factor(YearsSinceLastPromotion),fill=factor(Attrition)))+
geom_bar(position="dodge")+
facet_grid(". ~ Attrition")
ggplot(dfTrain,aes(x=factor(YearsSinceLastPromotion),fill=factor(Attrition)))+
geom_bar(position="dodge")+
facet_grid(". ~ Attrition")
ggplot(dfTrain, aes(x=Attrition,  fill=Attrition))+
labs(title="Employees", x = "", y="Count", fill="Attrition") + geom_bar(stat = "count")
ggplot(dfTrain, aes(x=Attrition,  fill=Attrition))+
labs(title="Employees", x = "", y="Count", fill="Attrition") + geom_bar(stat = "count")
ggplot(data = dfTrain) +
geom_bar(mapping = aes(x=AnnualIncome))
ggplot(dfTrain, aes(x=AnnualIncome,fill = Attrition)) + labs(title="Attrition Frequency by Annual Income", x = "Annual Income", y="Count", fill="Attrition") + geom_histogram(binwidth=7, color = "white" , position = position_stack(reverse = TRUE)) + scale_fill_brewer("Dark")
dfTrain$AnnualIncome <- as.integer(lapply(dfTrain$MonthlyIncome, MonthToYear))
ggplot(dfTrain,aes(x=factor(Attrition),fill=factor(JobSatisfaction)))+
geom_bar(position="dodge")
ggplot(dfTrain,aes(x=factor(JobSatisfaction), y=factor(Attrition),fill=factor(JobSatisfaction)))+
geom_jitter()
ggplot(dfTrain,aes(x=factor(JobSatisfaction), y=factor(Attrition),fill=factor(JobSatisfaction)))+
geom_point()
ggplot(dfTrain,aes(x=factor(JobInvolvement),fill=factor(Attrition)))+
geom_bar(position="dodge")+
facet_grid(". ~ Attrition")
ggplot(dfTrain,aes(x=factor(YearsSinceLastPromotion),fill=factor(Attrition)))+
geom_bar(position="dodge")+
facet_grid(". ~ Attrition")
ggplot(dfTrain,aes(x=factor(YearsSinceLastPromotion),fill=factor(Attrition)))+
geom_bar(position="dodge")+
facet_grid(". ~ Attrition")
ggplot(dfTrain, aes(x=Attrition,  fill=Attrition))+
labs(title="Employees", x = "", y="Count", fill="Attrition") + geom_bar(stat = "count")
ggplot(dfTrain, aes(x=Attrition,  fill=Attrition))+
labs(title="Employees", x = "", y="Count", fill="Attrition") + geom_bar(stat = "count")
ggplot(data = dfTrain) +
geom_bar(mapping = aes(x=AnnualIncome))
ggplot(dfTrain, aes(x=Monthly, fill = Attrition)) + labs(title="Attrition Frequency by Annual Income", x = "Annual Income", y="Count", fill="Attrition") + geom_histogram(binwidth=7, color = "white" , position = position_stack(reverse = TRUE)) + scale_fill_brewer("Dark")
ggplot(dfTrain, aes(x=AnnualIncome, fill = Attrition)) + labs(title="Attrition Frequency by Annual Income", x = "Annual Income", y="Count", fill="Attrition") + geom_histogram(binwidth=7, color = "white" , position = position_stack(reverse = TRUE)) + scale_fill_brewer("Dark")
dfTrain$AnnualIncome <- cut(dfTrain$AnnualIncome, breaks=c(0,50000,100000,199999,Inf),labels=c("$0-$50,000", "$50,000-$100,000", "$100,000-$200,000", "Over $200,000"))
ggplot(data = dfTrain) +
geom_bar(mapping = aes(x=AnnualIncome))
ggplot(dfTrain, aes(x=AnnualIncome, fill = Attrition)) + labs(title="Attrition Frequency by Annual Income", x = "Annual Income", y="Count", fill="Attrition") + geom_bar(binwidth=7, color = "white" , position = position_stack(reverse = TRUE)) + scale_fill_brewer("Dark")
ggplot(dfTrain, aes(x=AnnualIncome, fill = Attrition)) + labs(title="Attrition Frequency by Annual Income", x = "Annual Income", y="Count", fill="Attrition") + scale_fill_brewer("Dark")
ggplot(dfTrain,aes(x=factor(YearsSinceLastPromotion),fill=factor(Attrition)))+
geom_bar(position="dodge")+
facet_grid(". ~ Attrition")
ggplot(dfTrain,aes(x=factor(Attrition),fill=factor(JobSatisfaction)))+
geom_bar(position="dodge")
ggplot(dfTrain,aes(x=factor(JobSatisfaction), y=factor(Attrition),fill=factor(JobSatisfaction)))+
geom_jitter()
ggplot(dfTrain,aes(x=factor(JobSatisfaction), y=factor(Attrition),fill=factor(JobSatisfaction)))+
geom_point()
dfTrainAttritionDummies <- model.matrix(~dfTrain$Attrition -1, data = dfTrain)
dfTrainBusinessTravelDummies <- model.matrix(~dfTrain$BusinessTravel -1, data = dfTrain)
dfTrainEducationFieldDummies <- model.matrix(~dfTrain$Attrition -1, data = dfTrain)
dfTrainGenderDummies <- model.matrix(~dfTrain$Gender -1, data = dfTrain)
dfTrainDepartmentDummies <- model.matrix(~dfTrain$Department -1, data = dfTrain)
dfTrainEducationFieldDummies <- model.matrix(~dfTrain$EducationField -1, data = dfTrain)
dfTrainJobRoleDummies <- model.matrix(~dfTrain$JobRole -1, data = dfTrain)
dfTrainJobSatisfactionDummies <- model.matrix(~dfTrain$JobSatisfaction -1, data = dfTrain)
dfTrainMaritalStatusDummies <- model.matrix(~dfTrain$MaritalStatus -1, data = dfTrain)
dfTrainOverTimeDummies <- model.matrix(~dfTrain$OverTime -1, data = dfTrain)
dfTrainAnnualIncomeDummies <- model.matrix(~dfTrain$AnnualIncome -1, data = dfTrain)
dfTrainAgeGroupDummies <- model.matrix(~dfTrain$AgeGroup -1, data = dfTrain)
lm(formula = dfTrainAttritionDummies ~ dfTrainBusinessTravelDummies + dfTrainEducationFieldDummies + dfTrainGenderDummies + dfTrainDepartmentDummies + dfTrainEducationFieldDummies + dfTrainJobRoleDummies + dfTrainJobSatisfactionDummies + dfTrainMaritalStatusDummies + dfTrainOverTimeDummies + dfTrainAnnualIncomeDummies + dfTrainAgeGroupDummies)
lm(formula = dfTrainAttritionDummies ~ dfTrainBusinessTravelDummies + dfTrainEducationFieldDummies + dfTrainGenderDummies + dfTrainDepartmentDummies + dfTrainEducationFieldDummies + dfTrainJobRoleDummies + dfTrainJobSatisfactionDummies + dfTrainMaritalStatusDummies + dfTrainOverTimeDummies + dfTrainAnnualIncomeDummies)
dfTrainAttrition = filter(dfTrain, Attrition == "Yes")
dfTrainAttritionRate = (count(dfTrainAttrition))/1170
colnames(dfTrainAttritionRate) <- c("dfTrainAttritionRate")
dfTrainAttrRate <- as.numeric(dfTrainAttrRate)
print(dfTrainAttritionRate)
dfTrainAttrRate
dfTrain.BusinessTravelL3 = filter(dfTrain, Attrition == "Yes" & BusinessTravel == 3)
dfTrain.BusinessTravelAttrRateL3 = count(dfTrain.BusinessTravelL3)/1170
dfTrain.BusinessTravelL3 = filter(dfTrain, Attrition == "Yes" & BusinessTravel == 3)
dfTrain.BusinessTravelL3 = filter(dfTrain, Attrition == "Yes" & BusinessTravel == "Travel_Frequently")
dfTrain.BusinessTravelAttrRateL3 = count(dfTrain.BusinessTravelL3)/1170
View(dfTrain.BusinessTravelL3)
dfTrain.JobRoleRD = filter(dfTrain, Attrition == "Yes" & JobRole == "Research & Development")
dfTrain.JobRoleRDAttrRate = count(dfTrain.JobRoleRD)/1170
dfTrain.JobRoleRD = filter(dfTrain, Attrition == "Yes" & JobRole == "Research & Development")
dfTrain.BusinessTravelL3 = filter(dfTrain, Attrition == "Yes" & BusinessTravel == "Travel_Frequently")
dfTrain.JobRoleRD = filter(dfTrain, Attrition == "Yes" & JobRole == "Research & Development")
dfTrain.JobRoleRDAttrRate = count(dfTrain.JobRoleRD)/1170
dfTrainJobRoleDummies <- model.matrix(~dfTrain$JobRole -1, data = dfTrain)
head(dfTrainJobRoleDummies)
dfTrainDepartmentDummies <- model.matrix(~dfTrain$Department -1, data = dfTrain)
head(dfTrainDepartmentDummies)
lm(formula = dfTrainAttritionDummies ~ dfTrainBusinessTravelDummies + dfTrainDepartmentDummies)
View(dfTrain)
dfTrainAttrition = filter(dfTrain, Attrition == "Yes")
dfTrainAttritionRate = (count(dfTrainAttrition))/1170
colnames(dfTrainAttritionRate) <- c("dfTrainAttritionRate")
dfTrainAttrRate <- as.numeric(dfTrainAttrRate)
print(dfTrainAttritionRate)
dfTrainAttrRate
#Attrition Rate Per Variable Factor Level
#Attrition Rate by Job Satisfaction
#dfTrain.var <- c(colnames(dfTrain$4)
#variable.names(dfTrain)
#dfTrain.var = filter(dfTrain, dfTrain.var >= 0 )
#Factor Level 1
dfTrain.JobSatisfactionL1 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 1)
#Job Satisfaction Level 1 Attrition Rate
dfTrain.JobSatAttrRateL1 = count(dfTrain.JobSatisfactionL1)/1170
#Factor Level 2
dfTrain.JobSatisfactionL2 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 2)
dfTrain.JobSatAttrRateL2 = count(dfTrain.JobSatisfactionL2)/1170
#Factor Level 3
dfTrain.JobSatisfactionL3 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 3)
dfTrain.JobSatAttrRateL3 = count(dfTrain.JobSatisfactionL3)/1170
#Factor Level 4
dfTrain.JobSatisfactionL4 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 4)
dfTrain.JobSatAttrRateL4 = count(dfTrain.JobSatisfactionL4)/1170
#Attrition Rate of Frequent Business Travelers
dfTrain.BusinessTravelL3 = filter(dfTrain, Attrition == "Yes" & BusinessTravel == "Travel_Frequently")
dfTrain.BusinessTravelAttrRateL3 = count(dfTrain.BusinessTravelL3)/1170
#Attrition Rate of Employees in Research and Development
dfTrain.JobRoleRD = filter(dfTrain, Attrition == "Yes" & JobRole == "Research & Development")
dfTrain.JobRoleRDAttrRate = count(dfTrain.JobRoleRD)/1170
#Job Satisfaction Level 1 Attrition Rate
dfTrain.JobSatAttrRateL1 = count(dfTrain.JobSatisfactionL1)/1170
#Factor Level 2
dfTrain.JobSatisfactionL2 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 2)
dfTrain.JobSatAttrRateL2 = count(dfTrain.JobSatisfactionL2)/1170
#Factor Level 3
dfTrain.JobSatisfactionL3 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 3)
dfTrain.JobSatAttrRateL3 = count(dfTrain.JobSatisfactionL3)/1170
#Factor Level 4
dfTrain.JobSatisfactionL4 = filter(dfTrain, Attrition == "Yes" & JobSatisfaction == 4)
dfTrain.JobSatAttrRateL4 = count(dfTrain.JobSatisfactionL4)/1170
#Logistic Regression because it is a binomial predictor, only two possible outcomes.
contrasts(dfTrain$Attrition)
Fit1 = glm(formula = dfTrainAttritionDummies ~ dfTrainBusinessTravelDummies + dfTrainJobSatisfactionDummies)
ggplot(dfTrain,aes(x=factor(Attrition),fill=factor(JobSatisfaction)))+
geom_bar(position="dodge")
ggplot(dfTrain,aes(x=factor(JobSatisfaction), y=factor(Attrition),fill=factor(JobSatisfaction)))+
geom_jitter()
ggplot(dfTrain,aes(x=factor(JobSatisfaction), y=factor(Attrition),fill=factor(JobSatisfaction)))+
geom_point()
ggplot(dfTrain,aes(x=factor(JobInvolvement),fill=factor(Attrition)))+
geom_bar(position="dodge")+
facet_grid(". ~ Attrition")
ggplot(dfTrain,aes(x=factor(YearsSinceLastPromotion),fill=factor(Attrition)))+
geom_bar(position="dodge")+
facet_grid(". ~ Attrition")
ggplot(dfTrain,aes(x=factor(YearsSinceLastPromotion),fill=factor(Attrition)))+
geom_bar(position="dodge")+
facet_grid(". ~ Attrition")
ggplot(dfTrain, aes(x=Attrition,  fill=Attrition))+
labs(title="Employees", x = "", y="Count", fill="Attrition") + geom_bar(stat = "count")
ggplot(dfTrain, aes(x=Attrition,  fill=Attrition))+
labs(title="Employees", x = "", y="Count", fill="Attrition") + geom_bar(stat = "count")
ggplot(data = dfTrain) +
geom_bar(mapping = aes(x=AnnualIncome))
ggplot(dfTrain, aes(x=AnnualIncome, fill = Attrition)) + labs(title="Attrition Frequency by Annual Income", x = "Annual Income", y="Count", fill="Attrition") + scale_fill_brewer("Dark")
ggplot(dfTrain, aes(x=NumCompaniesWorked,fill = EmployeeStatus)) +
labs(title="Employee Distribution by Number of Companies Worked", x = "Number of Companies", y="Employee Count", fill="Status") +
geom_histogram( binwidth=1, position = position_stack(reverse = TRUE),color="white") +
scale_fill_manual(values=c("#2F63A0","#7D9099"))
plot(HourlyRate ~ Attrition, data = dfTrain, xlab = "Attrition Rate", ylab = "Annual Income")
plot(StockOptionLevel ~ Attrition, data = dfTrain, xlab = "Attrition Rate", ylab = "Stock Option Level")
plot(TotalWorkingYears ~ Attrition, data = dfTrain, xlab = "Attrition Rate", ylab = "Years at Company")
plot(YearsInCurrentRole ~ Attrition, data = dfTrain, xlab = "Attrition Rate", ylab = "Years in Current Role")
plot(YearsWithCurrManager ~ Attrition, data = dfTrain, xlab = "Attrition Rate", ylab = "Years with Current Manager")
plot(YearsAtCompany ~ Attrition, data = dfTrain, xlab = "Attrition Rate", ylab = "Years at Company")
ggplot(dfTrain, aes(x=Attrition,  fill=Attrition))+
labs(title="Employees", x = "", y="Count", fill="Attrition") + geom_bar(stat = "count")
knitr::opts_chunk$set(echo = FALSE)
setwd("\Users\mmastran\SMU\MSDS\github\MSDS\CaseStudy2")
getwd()
setwd("/Users/mmastran/SMU/MSDS/github/MSDS/CaseStudy2/")
dfm_attrition_data = read.csv("CaseStudy2-data.csv")
dfm_attrition_data <- read.csv("CaseStudy2-data.csv")
setwd("/Users/mmastran/SMU/MSDS/github/MSDS/CaseStudy2")
dfm_attrition_data <- read.csv("/Users/mmastran/SMU/MSDS/github/MSDS/CaseStudy2/CaseStudy2-data.csv")
