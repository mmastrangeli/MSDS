#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency")
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", type = "h")
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", type = "b")
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", type = "b", ylim = )
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", type = "b", ylim = [300,600])
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", ylim = [300,600])
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", ylim = [300,600])
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", ylim = [300,600])
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", ylim = [300,600])
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", ylim = [300,600])
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", ylim = (300,600))
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", ylim = (300,600))
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", ylim = (300,600))
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency")
hist(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency")
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", ylim = (300, 600))
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", ylim = (300:600))
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency", ylim = 600)
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(count(titanic_data_sex), main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency")
#Load the plyr library for analysis and counting
library(plyr)
#extract Sex column of data and put in a vector
titanic_data_sex <- titanic_data$Sex
#display the titanic passenger sex dataframe
titanic_data_sex
#Subset the vector into two vectors, male and female
#titanic_data_sex_male <- subset(titanic_data_sex, subset("male") == TRUE, select, drop = FALSE)
#titanic_data_sex_male
#Try using count function
count(titanic_data_sex)
plot(titanic_data_sex, main = "Titanic Male & Female Frequency", xlab = "Sex", ylab = "Frequency")
#Using sapply() return the mean of the 'Age', 'Fare', 'Survived' variables. In order to nest a function in the sapply function, using list to return
sapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean)
#Using sapply() return the mean of the 'Age', 'Fare', 'Survived' variables. In order to nest a function in the sapply function, using list to return
sapply(as.list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean)
#Using sapply() return the mean of the 'Age', 'Fare', 'Survived' variables. In order to nest a function in the sapply function, using list to return
lapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean, na.rm = TRUE)
#Using sapply() return the mean of the 'Age', 'Fare', 'Survived' variables. In order to nest a function in the sapply function, using list to return
lapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean)
#Using sapply() return the mean of the 'Age', 'Fare', 'Survived' variables. In order to nest a function in the sapply function, using list to return
lapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean)
#Using sapply() return the mean of the 'Age', 'Fare', 'Survived' variables. In order to nest a function in the sapply function, using list to return
lapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean)
sapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean, simplify = FALSE, USE.NAMES = FALSE)
#Using sapply() return the mean of the 'Age', 'Fare', 'Survived' variables. In order to nest a function in the sapply function, using list to return
lapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean)
sapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean, simplify = TRUE, USE.NAMES = FALSE)
#Using sapply() return the mean of the 'Age', 'Fare', 'Survived' variables. In order to nest a function in the sapply function, using list to return
lapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean)
sapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean, simplify = TRUE, USE.NAMES = TRUE)
#Using sapply() return the mean of the 'Age', 'Fare', 'Survived' variables. In order to nest a function in the sapply function, using list to return
lapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean)
sapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean, simplify = TRUE, USE.NAMES = TRUE, na.rm=TRUE)
#Using sapply() return the mean of the 'Age', 'Fare', 'Survived' variables. In order to nest a function in the sapply function, using list to return
lapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean, na.rm=TRUE)
sapply(list(titanic_data$Age, titanic_data$Fare, titanic_data$Survived), mean, simplify = TRUE, USE.NAMES = TRUE, na.rm=TRUE)
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
str(sleep_data)
sleep_data_age <- c(sleep_data$age)
sleep_data_age
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
str(sleep_data)
sleep_data_age <- c(sleep_data$age, na.rm=TRUE)
sleep_data_age
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
str(sleep_data)
sleep_data_age <- sleep_data$age
sleep_data_age
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
str(sleep_data)
sleep_data_age <- as.vector(sleep_data$age)
sleep_data_age
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
str(sleep_data)
colnames(sleep_data)
sleep_data_age <- as.vector(sleep_data$age)
sleep_data_age
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
str(sleep_data)
sleep_data_age <- as.vector(sleep_data$Age)
sleep_data_age
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
str(sleep_data)
sleep_data_age <- sleep_data$Age
sleep_data_age
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
str(sleep_data)
sleep_data_age <- sleep_data$Age
sleed_data_duration <- sleep_data$Duration
sleep_data_RSES <- sleep_data$RSES
sleep_data_age
sleed_data_duration
sleep_data_RSES
median_age <- median(sleep_data_age)
sleed_data_duration_min <- min(sleed_data_duration)
sleed_data_duration_max <- max(sleed_data_duration)
sleep_data_RSES_mean <- mean(sleep_data_RSES)
sleep_data_RSES_sd <- sd(sleep_data_RSES)
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
str(sleep_data)
sleep_data_age <- sleep_data$Age
sleed_data_duration <- sleep_data$Duration
sleep_data_RSES <- sleep_data$RSES
sleep_data_age
sleed_data_duration
sleep_data_RSES
median_age <- median(sleep_data_age, na.rm=TRUE)
sleed_data_duration_min <- min(sleed_data_duration, na.rm=TRUE)
sleed_data_duration_max <- max(sleed_data_duration, na.rm=TRUE)
sleep_data_RSES_mean <- mean(sleep_data_RSES, na.rm=TRUE)
sleep_data_RSES_sd <- sd(sleep_data_RSES, na.rm=TRUE)
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
str(sleep_data)
sleep_data_age <- sleep_data$Age
sleed_data_duration <- sleep_data$Duration
sleep_data_RSES <- sleep_data$RSES
sleep_data_age
sleed_data_duration
sleep_data_RSES
median_age <- median(sleep_data_age, na.rm=TRUE)
sleed_data_duration_min <- min(sleed_data_duration, na.rm=TRUE)
sleed_data_duration_max <- max(sleed_data_duration, na.rm=TRUE)
sleep_data_RSES_mean <- mean(sleep_data_RSES, na.rm=TRUE)
sleep_data_RSES_sd <- sd(sleep_data_RSES, na.rm=FALSE)
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
str(sleep_data)
sleep_data_age <- sleep_data$Age
sleed_data_duration <- sleep_data$Duration
sleep_data_RSES <- as.vector(sleep_data$RSES)
sleep_data_age
sleed_data_duration
sleep_data_RSES
median_age <- median(sleep_data_age, na.rm=TRUE)
sleed_data_duration_min <- min(sleed_data_duration, na.rm=TRUE)
sleed_data_duration_max <- max(sleed_data_duration, na.rm=TRUE)
sleep_data_RSES_mean <- mean(sleep_data_RSES, na.rm=TRUE)
sleep_data_RSES_sd <- sd(sleep_data_RSES, na.rm=FALSE)
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
#str(sleep_data)
sleep_data_age <- sleep_data$Age
sleed_data_duration <- sleep_data$Duration
sleep_data_RSES <- as.vector(sleep_data$RSES)
#sleep_data_age
#sleed_data_duration
#sleep_data_RSES
median_age <- median(sleep_data_age, na.rm=TRUE)
sleed_data_duration_min <- min(sleed_data_duration, na.rm=TRUE)
sleed_data_duration_max <- max(sleed_data_duration, na.rm=TRUE)
sleep_data_RSES_mean <- mean(sleep_data_RSES, na.rm=TRUE)
sleep_data_RSES_sd <- sd(sleep_data_RSES, na.rm=FALSE)
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
#str(sleep_data)
sleep_data_age <- sleep_data$Age
sleed_data_duration <- sleep_data$Duration
sleep_data_RSES <- as.vector(sleep_data$RSES)
#sleep_data_age
#sleed_data_duration
#sleep_data_RSES
median_age <- median(sleep_data_age, na.rm=TRUE)
sleed_data_duration_min <- min(sleed_data_duration, na.rm=TRUE)
sleed_data_duration_max <- max(sleed_data_duration, na.rm=TRUE)
sleep_data_RSES_mean <- mean(sleep_data_RSES, na.rm=TRUE)
sleep_data_RSES_sd <- sd(sleep_data_RSES, na.rm=TRUE)
median_age
sleed_data_duration_min
sleed_data_duration_max
sleep_data_RSES_mean
sleep_data_RSES_sd
report <- c(sapply(list(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd), /2), range(sleep_data$Duration, na.rm = TRUE))
#DivBy2 <- function(x){x/2}
report <- c(sapply(list(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd), /2, range(sleep_data$Duration, na.rm = TRUE))
#DivBy2 <- function(x){x/2}
report <- c(sapply(list(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd), DivBy2(), range(sleep_data$Duration, na.rm = TRUE))
report
#DivBy2 <- function(x){x/2}
report_part <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, range(sleep_data$Duration, na.rm = TRUE))
sleep_data_age <- sleep_data$Age
sleed_data_duration <- sleep_data$Duration
sleep_data_RSES <- as.vector(sleep_data$RSES)
#sleep_data_age
#sleed_data_duration
#sleep_data_RSES
sleep_data_age_median <- median(sleep_data_age, na.rm=TRUE)
sleed_data_duration_min <- min(sleed_data_duration, na.rm=TRUE)
sleed_data_duration_max <- max(sleed_data_duration, na.rm=TRUE)
sleep_data_RSES_mean <- mean(sleep_data_RSES, na.rm=TRUE)
sleep_data_RSES_sd <- sd(sleep_data_RSES, na.rm=TRUE)
sleep_data_age_median
sleed_data_duration_min
sleed_data_duration_max
sleep_data_RSES_mean
sleep_data_RSES_sd
#DivBy2 <- function(x){x/2}
report_part <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, range(sleep_data$Duration, na.rm = TRUE))
#DivBy2 <- function(x){x/2}
report_part <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, range(sleep_data$Duration, na.rm = TRUE))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, range(sleep_data$Duration, na.rm = TRUE))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, round(range(sleep_data$Duration, na.rm = TRUE)))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, round(range(sleep_data$Duration, na.rm = TRUE)))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, round(range(sleep_data$Duration)))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, round(range(sleep_data$Duration, )))
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, round(range(sleep_data$Duration, na.rm = TRUE)))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, round(range(sleep_data$Duration, na.rm = TRUE), digits = 1))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, round(range(sleep_data$Duration, na.rm = TRUE), digits = 0)
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, round(range(sleep_data$Duration, na.rm = TRUE))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, range(sleep_data$Duration, na.rm = TRUE))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, signif(range(sleep_data$Duration, na.rm = TRUE))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, signif(range(sleep_data$Duration, na.rm = TRUE)))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, signif(range(sleep_data$Duration, na.rm = TRUE), digits = 1))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, signif(range(sleep_data$Duration, na.rm = TRUE)))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, signif(range(sleep_data$Duration, na.rm = TRUE)), c("Median Age", "RSES Mean", "RSES Standard Deviation", "Sleep Duration Range"))
report
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, signif(range(sleep_data$Duration, na.rm = TRUE)))
report
sleep_data_age <- sleep_data$Age
sleed_data_duration <- sleep_data$Duration
sleep_data_RSES <- sleep_data$RSES
#sleep_data_age
#sleed_data_duration
#sleep_data_RSES
sleep_data_age_median <- median(sleep_data_age, na.rm=TRUE)
sleed_data_duration_min <- min(sleed_data_duration, na.rm=TRUE)
sleed_data_duration_max <- max(sleed_data_duration, na.rm=TRUE)
sleep_data_RSES_mean <- mean(sleep_data_RSES, na.rm=TRUE)
sleep_data_RSES_sd <- sd(sleep_data_RSES, na.rm=TRUE)
sleep_data_age_median
sleed_data_duration_min
sleed_data_duration_max
sleep_data_RSES_mean
sleep_data_RSES_sd
#DivBy2 <- function(x){x/2}
report <- c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, signif(range(sleep_data$Duration, na.rm = TRUE)))
report
#DivBy2 <- function(x){x/2}
report <- round(c(c(sleep_data_age_median, sleep_data_RSES_mean, sleep_data_RSES_sd)/5, signif(range(sleep_data$Duration, na.rm = TRUE))), digits = 2)
report
#Download the file sleep_data_01.csv from http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/index.html and store in a dataframe 'sleep_data
# Download and store data from sleep_data_01.csv and store in a dataframe 'sleep_data'
sleep_data <- read.csv("http://talklab.psy.gla.ac.uk/L1_labs/lab_1/homework/sleep_data_01.csv")
str(sleep_data)
#Making sure that my working directory is set correctly to my github syncronized directory
setwd("/Users/mmastran/SMU/MSDS/github/MSDS/unit03")
#Creating variable to store URL of FiveThirtyEight
UrlAddress <- "https://github.com/rudeboybert/fivethirtyeight"
#Git Command to clone FiveThirtyEight to my MSDS/unit03/FiveThirtyEight Github repository
git2r::clone(url = UrlAddress, local_path = "/Users/mmastran/SMU/MSDS/github/MSDS/unit03/FiveThirtyEight")
#Making sure that my working directory is set correctly to my github syncronized directory
#setwd("/Users/mmastran/SMU/MSDS/github/MSDS/unit03")
#Creating variable to store URL of FiveThirtyEight
#UrlAddress <- "https://github.com/rudeboybert/fivethirtyeight"
#list(UrlAddress)
#Git Command to clone FiveThirtyEight to my MSDS/unit03/FiveThirtyEight Github repository
#git2r::clone(url = UrlAddress, local_path = "/Users/mmastran/SMU/MSDS/github/MSDS/unit03/FiveThirtyEight")
library(fivethirtyeight)
library(fivethirtyeight)
install.packages("fivethirtyeight")
#Making sure that my working directory is set correctly to my github syncronized directory
#setwd("/Users/mmastran/SMU/MSDS/github/MSDS/unit03")
#Creating variable to store URL of FiveThirtyEight
#UrlAddress <- "https://github.com/rudeboybert/fivethirtyeight"
#list(UrlAddress)
#Git Command to clone FiveThirtyEight to my MSDS/unit03/FiveThirtyEight Github repository
#git2r::clone(url = UrlAddress, local_path = "/Users/mmastran/SMU/MSDS/github/MSDS/unit03/FiveThirtyEight")
install.packages("fivethirtyeight")
library(fivethirtyeight)
